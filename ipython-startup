#!/usr/bin/env python
# coding: utf-8

import os
import logging
import concurrent.futures

from glob import glob
from sudoku import solve, Puzzle, Box, Row, Col
from sudoku.const import ELEMENT_VALUES as EV
from sudoku import get_puzzles

_orig_log = log
log = logging.getLogger('ipython-startup')

def sorta_true(X):
    if isinstance(X, str):
        if X.lower() in ('t', 'true', 'y', 'yes'):
            return True
        if X.lower() in ('f', 'false', 'n', 'no'):
            return False
        try:
            x = int(X)
            if x == 0:
                return False
            return True
        except ValueError:
            pass
    return bool(X)

def maybe_solve(p):
    if sorta_true(os.environ.get("NO_SOLVE")):
        return None
    if so := os.environ.get("SOLVE_ONLY"):
        for item in so.split():
            try:
                item = int(item)
                if P[item] is p:
                    log.info('solving %s', repr(p))
                    return solve(p)
            except ValueError:
                pass
        return None
    log.info('solving %s', repr(p))
    return solve(p)

def reload_puzzles():
    global P, Q
    P = list(get_puzzles())

    L0 = len(P)

    for file in glob('t/asset/p*.txt'):
        bname = os.path.basename(file)[:-4]
        P.extend(get_puzzles(file))

    L1 = len(P)

    for i,p in enumerate(P):
        globals()[f'p{i}'] = p

    L = len(P)
    try:
        log.debug('disabling debug logging temporarily')
        logging.disable(logging.DEBUG)
        with concurrent.futures.ProcessPoolExecutor() as executor:
            Q = list(executor.map(maybe_solve, P))
    finally:
        logging.disable(logging.NOTSET)
        log.debug('debug logs re-enabled')

    for i,q in enumerate(Q):
        if q is not None:
            globals()[f'q{i}'] = q

    log.debug("loaded %d puzzles in 'P' and 'p0' … 'pN'", len(P))
    log.debug("loaded %d corresponding solution(s) in 'Q' and 'q0' … 'qN'", len(list(x for x in Q if x is not None)))
    log.debug("Puzzles.txt are puzzles p0 .. p%d", L0-1)

    for i in range(1,4,1):
        j = L0 - i
        if Q[j] is not None:
            log.debug("pm%d/qm%d => %s/%s", i, i, repr(P[j]), repr(Q[j]))
            globals()[f'pm{i}'] = P[j]
            globals()[f'qm{i}'] = Q[j]
        else:
            log.debug("pm%d => %s", i, repr(P[j]))
            globals()[f'pm{i}'] = P[j]

reload_puzzles()

log = _orig_log
